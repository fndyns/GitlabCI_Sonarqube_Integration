stages:
  - build
  - sonarqube
  - publish
  - deploy
  - fetch-config
  - deploy-to-test
  - deploy-to-prod

build:
  image: eclipse-temurin:17-jdk-alpine
  stage: build
  # Cache downloaded dependencies and plugins between builds.
  # The key here separates one cache per branch/tag ($CI_COMMIT_REF_SLUG)
  cache:
    key: "maven-$CI_COMMIT_REF_SLUG"
    paths:
      - .m2/repository
  script:
    - ./mvnw clean install --settings ./settings.xml -DskipTests=true
  artifacts:
    name: "Maven artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    paths:
      - "**/target"

sonarqube:
  stage: sonarqube
  image: maven:3.8.3-openjdk-17
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - mvn --batch-mode verify sonar:sonar --settings ./settings.xml -DskipTests=true -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=b5346_banct-fee-svc_AYdVjZI239qOxhCA8Jyj -Dsonar.qualitygate.wait=true
  allow_failure: true
  except:
    - main


publish:
  stage: publish
  image:
    name: amazon/aws-cli
    entrypoint: [ "" ]
  services:
    - docker:dind
  variables:
    FULL_DOCKER_URL: "${DOCKER_REGISTRY}${DOCKER_REPO_NAME}"
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then 
        FULL_DOCKER_URL="${FULL_DOCKER_URL}${PROD_REPO_SUFFIX}";
      fi
    - aws ecr get-login-password | docker login --username AWS --password-stdin $FULL_DOCKER_URL
  script:
    - docker build --pull -t $FULL_DOCKER_URL .
    - docker tag $FULL_DOCKER_URL $FULL_DOCKER_URL:latest
    - docker tag $FULL_DOCKER_URL $FULL_DOCKER_URL:$CI_PIPELINE_IID
    - docker push $FULL_DOCKER_URL:latest
    - docker push $FULL_DOCKER_URL:$CI_PIPELINE_IID
    

fetch-config:
  stage: fetch-config
  image: alpine
  before_script:
    - apk add curl jq
  script:
    - deployment_yaml=$(curl -H "PRIVATE-TOKEN:glpat-7TZUiRGJy5dSkT2oagYx" "https://gitlab.com/api/v4/projects/36393490/repository/files/services%2Fbanct-fee-svc%2Fdeployment.yaml/raw?ref=main")
    - echo "$deployment_yaml"
    - echo "$deployment_yaml" >> deployment.yaml
  artifacts:
    name: "Kubernetes config artifacts"
    expire_in: 7 days
    paths:
      - deployment.yaml


deploy-to-test:
  stage: deploy-to-test
  image:
    name: bitnami/kubectl:latest
    entrypoint: [ '' ]
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  script:
    - sed -i "s/<VERSION>/${CI_PIPELINE_IID}/1" deployment.yaml
    - kubectl config use-context b5346/banct-gitlab-agent:banct-k8s-agent 
    - kubectl apply -f deployment.yaml
    - echo "K8S TEST POD UPDATING..."
    - kubectl rollout restart deployment banct-fee-svc


deploy-to-prod:
  stage: deploy-to-prod
  image:
    name: bitnami/kubectl:latest
    entrypoint: [ '' ]
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual
  script:
    - sed -i "s/<VERSION>/${CI_PIPELINE_IID}/1" deployment.yaml
    - kubectl config use-context b5346/banct-gitlab-agent:banct-k8s-agent-prod
    - kubectl apply -f deployment.yaml
    - echo "K8S PROD POD UPDATING..."
    - kubectl rollout restart deployment banct-fee-svc